library(MASS)   # load library MASS
library(MASS)   # load library MASS
# set the sample size
n = 100
# set the population mean
mu = c(0,0)
# set the population var-cov matrix
Sigma = matrix(c(4, 1, 1, 1), nrow = 2)
# generate a random sample from the bivariate normal dist
x = mvrnorm(n, mu, Sigma)
# plot the data
plot(x[,1],x[,2],
xlim = c(-5,5),ylim = c(-5,5),
xlab = "X1", ylab = "X2")
n.rep = 500
# initialize a matrix for storing sample means
xbar.mat = matrix(rep(0,n.rep*2), ncol = 2)
# initialize a matrix for storing sample cov
S.mat = matrix(rep(0,n.rep*4), ncol = 4)
# set a random seed
set.seed(914)
for(i in 1:n.rep){
x = mvrnorm(n, mu, Sigma)
# compute sample mean
xbar.mat[i,] = colMeans(x)
# compute S and vectorize it
S.mat[i,] = matrix(cov(x), nrow = 1)
}
colMeans(xbar.mat) # average of 500 sample means
cov(xbar.mat) # estimated covariance of sample means
colMeans(S.mat) # average of 500 sample covariances
cov(xbar.mat) # estimated covariance of sample means
iris  # available in R datasets package
attach(iris)
table(Species) # sample sizes
mean.virginica = colMeans(iris[Species == "virginica", 3:4])
mean.virginica
S.virginica = cov(iris[Species == "virginica", 3:4])
S.virginica
eigen(S.virginica)
eig.val = eigen(S.virginica)$values
eig.vec = eigen(S.virginica)$vectors
# pdf("petal-width-vs-length-virginica.pdf", height=5, width=6)
par(mfrow=c(1,1))
plot(Petal.Length[Species == "virginica"], Petal.Width[Species == "virginica"], col = "red", pch = 1, xlab="Petal.Length", ylab="Petal.Width", main="Iris virginica", xlim=c(4,7), ylim=c(1,3))
# draw a line in e1 direction
abline(a=mean.virginica[2]-eig.vec[2,1]/eig.vec[1,1]*mean.virginica[1],
b=eig.vec[2,1]/eig.vec[1,1], col="gray")
# draw a line in e2 direction
abline(a=mean.virginica[2]-eig.vec[2,2]/eig.vec[1,2]*mean.virginica[1],
b=eig.vec[2,2]/eig.vec[1,2], col="gray")
# add the sample mean vector to the plot
points(mean.virginica[1], mean.virginica[2], col="red", pch=15)
eig.vec
eig.vec
eig.vec
eig.vec
S.virginica
S.virginica
eig.vec
mean.virginica[2]
mean.virginica[2]-eig.vec[2,1]/eig.vec[1,1]*mean.virginica[1]
mean.virginica[1]
eig.vec[2,1]
eig.vec[,1]
eig.vec[,1]^2
sum(eig.vec[,1]^2)
eig.val
eig.val^2
sum(eig.val^2)
## 3.
install.packages("readbitmap")
library(readbitmap)
setwd("")
library(readbitmap)
# select n random samples of 12 × 12 image patches
n = 100000
r1 = sample(1:100,n,replace=T)
r2 = sample(1:589,n,replace=T)
r3 = sample(1:589,n,replace=T)
r1
r2
r3
r1==448
r1
table(r1)
# vectorize the selected patches
X = matrix(NA,n,144)
X
library(readbitmap)
setwd("")
library(readbitmap)
setwd(".")
getwd()
setwd("D:\project\22-1_multivariate")
setwd("D:/project/22-1_multivariate")
img = array(NA,c(100,600,600))
img = array(NA,c(100,600,600))
for (i in 1:100){
img[i,,] = read.bitmap(paste("./data/img/img",i,sep=""))
}
dim(img[1,,]) # the dimension of the first image
# visualize the first 600 x 600 grayscale image
par(mfrow=c(1,1))
par(mar=c(.5, .5, .5, .5))
image(t(apply(img[1,,],2,rev)), col=gray((0:229)/229), axes=F)
# select n random samples of 12 × 12 image patches
n = 100000
r1 = sample(1:100,n,replace=T)
r2 = sample(1:589,n,replace=T)#가로 시작점
r3 = sample(1:589,n,replace=T)#세로 시작점
table(r1)
# vectorize the selected patches
X = matrix(NA,n,144)
for (i in 1:n){
X[i,] = as.vector(img[r1[i],r2[i]:(r2[i]+11),r3[i]:(r3[i]+11)])
}
mean(X)
# compute the sample mean and the sample covariance
mu = mean(X)
S = cov(X)
source('D:/project/22-1_multivariate/다변량.R', encoding = 'UTF-8', echo=TRUE)
S
S
S.shape
S.size
dim(S)
# conduct eigen decomposition using the sample covariance
# and make U including the first d eigenvectors
U = decompose(cov(x))
# conduct eigen decomposition using the sample covariance
# and make U including the first d eigenvectors
U = decompose(cov(X))
U
# conduct eigen decomposition using the sample covariance
# and make U including the first d eigenvectors
U = princomp(cov(X))
U
U$loadings
# conduct eigen decomposition using the sample covariance
# and make U including the first d eigenvectors
U = princomp(cov(X))$loadings
# image reconstruction using PCA by gluing 50^2 disjoint 12 × 12 image patches
Z = matrix(NA,600,600)
for (i in 12*(0:49)+1){
for (j in 12*(0:49)+1){
Z[i:(i+11),j:(j+11)] = as.vector(mu + U%*%t(U)%*%(as.vector(img[1,i:(i+11),j:(j+11)])-mu))
}
}
Z
image(Z, col=gray((0:229)/229), axes=F)
# conduct eigen decomposition using the sample covariance
# and make U including the first d eigenvectors
U = princomp(cov(X))$loadings[:20]
# conduct eigen decomposition using the sample covariance
# and make U including the first d eigenvectors
U = princomp(cov(X))$loadings[1:20]
# image reconstruction using PCA by gluing 50^2 disjoint 12 × 12 image patches
Z = matrix(NA,600,600)
for (i in 12*(0:49)+1){
for (j in 12*(0:49)+1){
Z[i:(i+11),j:(j+11)] = as.vector(mu + U%*%t(U)%*%(as.vector(img[1,i:(i+11),j:(j+11)])-mu))
}
}
# image reconstruction using PCA by gluing 50^2 disjoint 12 × 12 image patches
Z = matrix(NA,600,600)
for (i in 12*(0:49)+1){
for (j in 12*(0:49)+1){
Z[i:(i+11),j:(j+11)] = as.vector(mu + U%*%t(U)%*%(as.vector(img[1,i:(i+11),j:(j+11)])-mu))
}
}
# conduct eigen decomposition using the sample covariance
# and make U including the first d eigenvectors
U = princomp(cov(X))$loadings
# image reconstruction using PCA by gluing 50^2 disjoint 12 × 12 image patches
Z = matrix(NA,600,600)
for (i in 12*(0:49)+1){
for (j in 12*(0:49)+1){
Z[i:(i+11),j:(j+11)] = as.vector(mu + U%*%t(U)%*%(as.vector(img[1,i:(i+11),j:(j+11)])-mu))
}
}
image(Z, col=gray((0:229)/229), axes=F)
Z
12*(0:49)+1
12*(0:49)+1
# vectorize the selected patches
X = matrix(NA,n,144)
for (i in 1:n){
X[i,] = as.vector(img[r1[i],r2[i]:(r2[i]+11),r3[i]:(r3[i]+11)])
}
mean(X)
# vectorize the selected patches
X = matrix(NA,n,144)
X[i,] = as.vector(img[r1[i],r2[i]:(r2[i]+11),r3[i]:(r3[i]+11)])
for (i in 1:n){
X[i,] = as.vector(img[r1[i],r2[i]:(r2[i]+11),r3[i]:(r3[i]+11)])
}
mean(X)
mean(X)
# select n random samples of 12 × 12 image patches
n = 100000
r1 = sample(1:100,n,replace=T)
r2 = sample(1:589,n,replace=T)#가로 시작점
r3 = sample(1:589,n,replace=T)#세로 시작점
table(r1)
# vectorize the selected patches
X = matrix(NA,n,144)
for (i in 1:n){
X[i,] = as.vector(img[r1[i],r2[i]:(r2[i]+11),r3[i]:(r3[i]+11)])
}
mean(X)
setwd("D:/project/22-1_multivariate")
img = array(NA,c(100,600,600))
for (i in 1:100){
img[i,,] = read.bitmap(paste("./data/img/img",i,sep=""))
}
dim(img[1,,]) # the dimension of the first image
# visualize the first 600 x 600 grayscale image
par(mfrow=c(1,1))
par(mar=c(.5, .5, .5, .5))
image(t(apply(img[1,,],2,rev)), col=gray((0:229)/229), axes=F)
# select n random samples of 12 × 12 image patches
n = 100000
r1 = sample(1:100,n,replace=T)
r2 = sample(1:589,n,replace=T)#가로 시작점
r3 = sample(1:589,n,replace=T)#세로 시작점
table(r1)
# vectorize the selected patches
X = matrix(NA,n,144)
for (i in 1:n){
X[i,] = as.vector(img[r1[i],r2[i]:(r2[i]+11),r3[i]:(r3[i]+11)])
}
mean(X)
X
# conduct eigen decomposition using the sample covariance
# and make U including the first d eigenvectors
U = princomp(cov(X))$loadings
U
U
U[1:20]
U[:,1:20]
# image reconstruction using PCA by gluing 50^2 disjoint 12 × 12 image patches
Z = matrix(NA,600,600)
U[:,1:20]
dim(U)
U[:,1:20]
U[,1:20]
# image reconstruction using PCA by gluing 50^2 disjoint 12 × 12 image patches
Z = matrix(NA,600,600)
for (i in 12*(0:49)+1){
for (j in 12*(0:49)+1){
Z[i:(i+11),j:(j+11)] = as.vector(mu + U[,1:20]%*%t(U[,1:20])%*%(as.vector(img[1,i:(i+11),j:(j+11)])-mu))
}
}
image(Z, col=gray((0:229)/229), axes=F)
X
dim(X)
cov(X)
12*(0:49)
# image reconstruction using PCA by gluing 50^2 disjoint 12 × 12 image patches
Z = matrix(NA,600,600)
for (i in 12*(0:49)+1){
for (j in 12*(0:49)+1){
Z[i:(i+11),j:(j+11)] = as.vector(mu + U[,1:20]%*%t(U[,1:20])%*%(as.vector(img[1,i:(i+11),j:(j+11)])-mu))
}
}
Z
image(Z, col=gray((0:229)/229), axes=F)
# image reconstruction using PCA by gluing 50^2 disjoint 12 × 12 image patches
Z = matrix(NA,600,600)
for (i in 12*(0:49)+1){
for (j in 12*(0:49)+1){
Z[i:(i+11),j:(j+11)] = as.vector(mu + U[,1:1]%*%t(U[,1:20])%*%(as.vector(img[1,i:(i+11),j:(j+11)])-mu))
}
}
Z
# image reconstruction using PCA by gluing 50^2 disjoint 12 × 12 image patches
Z = matrix(NA,600,600)
for (i in 12*(0:49)+1){
for (j in 12*(0:49)+1){
Z[i:(i+11),j:(j+11)] = as.vector(mu + U[,1:1]%*%t(U[,1:1])%*%(as.vector(img[1,i:(i+11),j:(j+11)])-mu))
}
}
Z
image(Z, col=gray((0:229)/229), axes=F)
i in 12*(0:49)+1
for (i in 12*(0:49)+1){print(i)}
U[:,0:2].shape
U[,0:2].shape
dim(U[,0:2])
